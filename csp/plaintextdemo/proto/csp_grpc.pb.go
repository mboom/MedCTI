// Defines an RPC service to simulate a cryptographic services provider

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: proto/csp.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	CSP_PublishGC_FullMethodName = "/proto.CSP/PublishGC"
	CSP_FetchGC_FullMethodName   = "/proto.CSP/FetchGC"
)

// CSPClient is the client API for CSP service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// The CSP service definitions
type CSPClient interface {
	// A RPC to publish a garbled function, encryption parameter and key id to the CSP
	PublishGC(ctx context.Context, in *GarbledCircuit, opts ...grpc.CallOption) (*emptypb.Empty, error)
	// A RPC to fetch a garbled function and encryption parameter
	FetchGC(ctx context.Context, in *Key, opts ...grpc.CallOption) (*GarbledCircuit, error)
}

type cSPClient struct {
	cc grpc.ClientConnInterface
}

func NewCSPClient(cc grpc.ClientConnInterface) CSPClient {
	return &cSPClient{cc}
}

func (c *cSPClient) PublishGC(ctx context.Context, in *GarbledCircuit, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, CSP_PublishGC_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cSPClient) FetchGC(ctx context.Context, in *Key, opts ...grpc.CallOption) (*GarbledCircuit, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GarbledCircuit)
	err := c.cc.Invoke(ctx, CSP_FetchGC_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CSPServer is the server API for CSP service.
// All implementations must embed UnimplementedCSPServer
// for forward compatibility.
//
// The CSP service definitions
type CSPServer interface {
	// A RPC to publish a garbled function, encryption parameter and key id to the CSP
	PublishGC(context.Context, *GarbledCircuit) (*emptypb.Empty, error)
	// A RPC to fetch a garbled function and encryption parameter
	FetchGC(context.Context, *Key) (*GarbledCircuit, error)
	mustEmbedUnimplementedCSPServer()
}

// UnimplementedCSPServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedCSPServer struct{}

func (UnimplementedCSPServer) PublishGC(context.Context, *GarbledCircuit) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishGC not implemented")
}
func (UnimplementedCSPServer) FetchGC(context.Context, *Key) (*GarbledCircuit, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchGC not implemented")
}
func (UnimplementedCSPServer) mustEmbedUnimplementedCSPServer() {}
func (UnimplementedCSPServer) testEmbeddedByValue()             {}

// UnsafeCSPServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CSPServer will
// result in compilation errors.
type UnsafeCSPServer interface {
	mustEmbedUnimplementedCSPServer()
}

func RegisterCSPServer(s grpc.ServiceRegistrar, srv CSPServer) {
	// If the following call pancis, it indicates UnimplementedCSPServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&CSP_ServiceDesc, srv)
}

func _CSP_PublishGC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GarbledCircuit)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CSPServer).PublishGC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CSP_PublishGC_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CSPServer).PublishGC(ctx, req.(*GarbledCircuit))
	}
	return interceptor(ctx, in, info, handler)
}

func _CSP_FetchGC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Key)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CSPServer).FetchGC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CSP_FetchGC_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CSPServer).FetchGC(ctx, req.(*Key))
	}
	return interceptor(ctx, in, info, handler)
}

// CSP_ServiceDesc is the grpc.ServiceDesc for CSP service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CSP_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.CSP",
	HandlerType: (*CSPServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PublishGC",
			Handler:    _CSP_PublishGC_Handler,
		},
		{
			MethodName: "FetchGC",
			Handler:    _CSP_FetchGC_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/csp.proto",
}
