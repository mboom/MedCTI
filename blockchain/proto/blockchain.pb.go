// Defines an RPC service to simulate a Blockchain implementation

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.6
// 	protoc        v3.6.1
// source: proto/blockchain.proto

package proto

import (
	empty "github.com/golang/protobuf/ptypes/empty"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// An basic IPFIX flow definition
// Destination and source are 4-bit addresses for simplicity
// Destination and source represent different kind of network addresses like MAC or IP addresses
type Flow struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            uint32                 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Kid           uint32                 `protobuf:"varint,2,opt,name=kid,proto3" json:"kid,omitempty"`
	Destination   []byte                 `protobuf:"bytes,3,opt,name=destination,proto3" json:"destination,omitempty"`
	Source        []byte                 `protobuf:"bytes,4,opt,name=source,proto3" json:"source,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Flow) Reset() {
	*x = Flow{}
	mi := &file_proto_blockchain_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Flow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Flow) ProtoMessage() {}

func (x *Flow) ProtoReflect() protoreflect.Message {
	mi := &file_proto_blockchain_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Flow.ProtoReflect.Descriptor instead.
func (*Flow) Descriptor() ([]byte, []int) {
	return file_proto_blockchain_proto_rawDescGZIP(), []int{0}
}

func (x *Flow) GetId() uint32 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Flow) GetKid() uint32 {
	if x != nil {
		return x.Kid
	}
	return 0
}

func (x *Flow) GetDestination() []byte {
	if x != nil {
		return x.Destination
	}
	return nil
}

func (x *Flow) GetSource() []byte {
	if x != nil {
		return x.Source
	}
	return nil
}

var File_proto_blockchain_proto protoreflect.FileDescriptor

const file_proto_blockchain_proto_rawDesc = "" +
	"\n" +
	"\x16proto/blockchain.proto\x12\x05proto\x1a\x1bgoogle/protobuf/empty.proto\"b\n" +
	"\x04Flow\x12\x0e\n" +
	"\x02id\x18\x01 \x01(\rR\x02id\x12\x10\n" +
	"\x03kid\x18\x02 \x01(\rR\x03kid\x12 \n" +
	"\vdestination\x18\x03 \x01(\fR\vdestination\x12\x16\n" +
	"\x06source\x18\x04 \x01(\fR\x06source2~\n" +
	"\n" +
	"Blockchain\x127\n" +
	"\x0ePublishLogData\x12\v.proto.Flow\x1a\x16.google.protobuf.Empty\"\x00\x127\n" +
	"\fFetchLogData\x12\x16.google.protobuf.Empty\x1a\v.proto.Flow\"\x000\x01B*Z(github.com/mboom/MedCTI/blockchain/protob\x06proto3"

var (
	file_proto_blockchain_proto_rawDescOnce sync.Once
	file_proto_blockchain_proto_rawDescData []byte
)

func file_proto_blockchain_proto_rawDescGZIP() []byte {
	file_proto_blockchain_proto_rawDescOnce.Do(func() {
		file_proto_blockchain_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_proto_blockchain_proto_rawDesc), len(file_proto_blockchain_proto_rawDesc)))
	})
	return file_proto_blockchain_proto_rawDescData
}

var file_proto_blockchain_proto_msgTypes = make([]protoimpl.MessageInfo, 1)
var file_proto_blockchain_proto_goTypes = []any{
	(*Flow)(nil),        // 0: proto.Flow
	(*empty.Empty)(nil), // 1: google.protobuf.Empty
}
var file_proto_blockchain_proto_depIdxs = []int32{
	0, // 0: proto.Blockchain.PublishLogData:input_type -> proto.Flow
	1, // 1: proto.Blockchain.FetchLogData:input_type -> google.protobuf.Empty
	1, // 2: proto.Blockchain.PublishLogData:output_type -> google.protobuf.Empty
	0, // 3: proto.Blockchain.FetchLogData:output_type -> proto.Flow
	2, // [2:4] is the sub-list for method output_type
	0, // [0:2] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_proto_blockchain_proto_init() }
func file_proto_blockchain_proto_init() {
	if File_proto_blockchain_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_proto_blockchain_proto_rawDesc), len(file_proto_blockchain_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   1,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_proto_blockchain_proto_goTypes,
		DependencyIndexes: file_proto_blockchain_proto_depIdxs,
		MessageInfos:      file_proto_blockchain_proto_msgTypes,
	}.Build()
	File_proto_blockchain_proto = out.File
	file_proto_blockchain_proto_goTypes = nil
	file_proto_blockchain_proto_depIdxs = nil
}
